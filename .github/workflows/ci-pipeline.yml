name: CI - Gestion prof Service

on:
  push:
    branches:
      - master
      - develop
      - preprod
      - prod
      - preprod
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: elhadji01/gestion-prof-service
      REGISTRY_DEV: elhadji01/dev-registry
      REGISTRY_PROD: elhadji01/prod-registry
      SONAR_PROJECT_KEY: elhadji-mamadou-sarr_gestion-prof-service
      SONAR_ORG: elhadji-mamadou-sarr
      SONAR_HOST: https://sonarcloud.io

    steps:
      - name: Cloner le repo
        uses: actions/checkout@v3

      - name: üîß Configurer JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Build du projet
        run: mvn clean install -DskipTests

#      - name:  üñ• Ex√©cuter les tests IHM
#        run: |   rld
#          mvn verify -P ui-tests

#      - name: Ex√©cuter les tests unitaires
#        run: mvn test

      - name: üéØ V√©rification SonarQube
        run: mvn sonar:sonar -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.organization=$SONAR_ORG -Dsonar.host.url=$SONAR_HOST
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: üìÇ Stocker les artefacts de build
        uses: actions/upload-artifact@v4
        with:
          name: gestion-prof-artifact
          path: target/*.jar

  docker:
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: elhadji01/gestion-prof-service

    steps:
      - name: üõé Cloner le repo
        uses: actions/checkout@v3

      - name: üì• T√©l√©charger les artefacts de build
        uses: actions/download-artifact@v4
        with:
          name: gestion-prof-artifact
          path: target

      - name: üîë Login √† Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üè∑ Cr√©ation et Push de l'image Docker
        run: |
          TAG=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          IMAGE_TAG=${{ env.IMAGE_NAME }}:$TAG
          echo "Cr√©ation de l'image Docker avec le tag : $IMAGE_TAG"
          
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          
          # Ajouter le tag latest uniquement pour master ou main
          if [ "$TAG" == "master" ] || [ "$TAG" == "main" ]; then
            docker tag $IMAGE_TAG ${{ env.IMAGE_NAME }}:latest
            docker push ${{ env.IMAGE_NAME }}:latest
          fi

  deploy-k8s:
    needs: docker
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: elhadji01/gestion-prof-service

    steps:
      - name: üõé Cloner le repo
        uses: actions/checkout@v3


      - name: üì• Installer `kubectl`
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name:  üîë Configurer AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-north-1

      - name: üîë Mettre √† jour le contexte Kubernetes pour EKS
        run: |
          aws eks update-kubeconfig --name gestion-prof-service-cluster --region eu-north-1
          kubectl config current-context

      - name: üîë Configurer l'acc√®s √† Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          kubectl config use-context arn:aws:eks:eu-north-1:851725523231:cluster/gestion-prof-service-cluster

      - name: üîç V√©rifier la connexion au cluster EKS
        run: kubectl get nodes

      - name: üöÄ D√©ployer sur Kubernetes (Preprod)
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/monitoring-namespace.yaml
          kubectl apply -f k8s/prometheus-configmap.yaml
          kubectl apply -f k8s/prometheus-deployment.yaml
          kubectl apply -f k8s/prometheus-service.yaml

          kubectl apply -f k8s/grafana-deployment.yaml
          kubectl apply -f k8s/grafana-service.yaml
#          if [[ "$TAG" == "master" ]]; then
#            kubectl apply -f k8s/namespace.yaml
#            kubectl apply -f k8s/deployment.yaml
#            kubectl apply -f k8s/service.yaml
#          elif [[ "$TAG" == "staging" ]]; then
#            kubectl apply -f k8s/staging/namespace.yaml
#            kubectl apply -f k8s/staging/deployment.yaml
#            kubectl apply -f k8s/staging/service.yaml
#          elif [[ "$TAG" == "preprod" ]]; then
#            kubectl apply -f k8s/preprod/namespace.yaml
#            kubectl apply -f k8s/preprod/deployment.yaml
#            kubectl apply -f k8s/preprod/service.yaml
#          elif [[ "$TAG" == "prod" ]]; then
#            kubectl apply -f k8s/namespace.yaml
#            kubectl apply -f k8s/deployment.yaml
#            kubectl apply -f k8s/service.yaml
#          fi